package org.openhab.binding.zwave.internal.protocol.security.crypto.interfaces;

import java.security.KeyPair;
import java.security.SecureRandom;
import java.security.interfaces.ECPrivateKey;

import org.openhab.binding.zwave.internal.protocol.security.crypto.ZWaveCryptoException;

public interface ZWaveCryptoDiffieHellman {

    /**
     * The zwave spec defines the manner in which the key pair must be generated:
     * CC:009F.01.00.11.09D
     * <ul>
     * <li>The EDCH private key MUST be created from 32 random bytes, which are generated using the PRNG function
     * (3.6.4.6). The public key is calculated from the private key using Curve25519 [28]
     * </ul>
     *
     * @param secureRandom TODO: zDoc
     *
     * @return a newly generated ECDH keypair
     * @throws ZWaveCryptoException if an error occurs during the operation
     */
    public abstract KeyPair generateECDHKeyPairAccordingToZwaveSpec(SecureRandom entrophySource)
            throws ZWaveCryptoException;

    /**
     * Executes the ECDH key agreement
     *
     * @param privateKey               the ECDH private key belonging to the OH zwave controller
     * @param deviceEcdhPublicKeyBytes the ECDH public key belonging to the device in the pairing process
     * @param nodeIdForLogging         the nodeId of the device in the pairing process
     * @return the shared secret as generated by the ECDH key exchange
     * @throws ZWaveCryptoException
     */
    public abstract byte[] executeDiffieHellmanKeyAgreement(ECPrivateKey privateKey, byte[] deviceEcdhPublicKeyBytes,
            int nodeIdForLogging) throws ZWaveCryptoException;
}
